{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sequel::Factory","tagline":"Simple, powerful factories for Sequel models","body":"**Sequel::Factory** is a little [RubyGem](http://rubygems.org) that lets you\r\neasily specify factories for your [Sequel](http://sequel.rubyforge.org/) models.\r\nA factory is an object that knows how to generate an instance of a model. They\r\nare very useful in testing and development scenarios when you need to simulate\r\nthe existence of real data in your system.\r\n\r\nSequel::Factory supports the following features:\r\n\r\n  * Multiple factories per model, with different attributes\r\n  * Inclusion of the attributes of one factory into another\r\n  * Ability to configure the `Sequel::Model` method used by a factory to\r\n    generate instances (defaults to `create`)\r\n  * Ability to override factory-generated values on instance creation\r\n  * Sequential attributes (e.g. auto-incrementing ids)\r\n\r\nAlso, the actual code is only ~100 lines of Ruby, so it should be fairly\r\nstraightforward for you to understand.\r\n\r\n## Installation\r\n\r\nUsing [RubyGems](http://rubygems.org/):\r\n\r\n    $ sudo gem install sequel-factory\r\n\r\nFrom a local copy:\r\n\r\n    $ git clone git://github.com/mjijackson/sequel-factory.git\r\n    $ cd sequel-factory\r\n    $ rake package && sudo rake install\r\n\r\n## Usage\r\n\r\nSequel::Factory adds a `factory` method to `Sequel::Model`. You use this\r\nmethod to define your factories by passing a block and (optionally) a name. When\r\nyou pass a block a new instance of `Sequel::Factory` is created.\r\n\r\nYou call a factory using `Sequel::Model.make`. Each time the factory is called\r\nits block is `instance_eval`'d in the context of the factory. The factory uses\r\n`method_missing` to catch all unknown method calls and their arguments, which\r\nshould correspond to the names and values of attributes to use for the model.\r\n\r\nThis may sound a bit complex, but it works out to be very simple in practice.\r\n\r\n```ruby\r\nUser.factory do\r\n  # self is User.factory (or User.factories[:default])\r\n  name Randgen.name\r\nend\r\n\r\nUser.factory(:with_email) do\r\n  # self is User.factory(:with_email)\r\n  include_factory User.factory\r\n  email Randgen.email\r\nend\r\n\r\nuser1 = User.make               # Has a \"name\" attribute\r\nuser2 = User.make(:with_email)  # Has both \"name\" and \"email\" attributes\r\n```\r\n\r\nThe above example defines two factories on the `User` model: a \"default\" factory\r\nand another factory named `:with_email`. The `:with_email` factory _includes_\r\nthe default factory (using `Sequel::Factory#include_factory`), which just means\r\nthat all attributes defined in the default factory will also be set on instances\r\nthat are generated with the `:with_email` factory in addition to any attributes\r\nit defines itself.\r\n\r\nIn the example above I'm using the helpful [randexp gem](http://rubygems.org/gems/randexp)\r\nto generate my factory values, but you can generate them however you like.\r\n\r\nIf you need to generate unique sequential values you can pass a block to the\r\nattribute name when you call it in the factory. Each time this block is called\r\nit takes an incrementing integer value as its argument. The return value of the\r\nblock is used as the value of the attribute.\r\n\r\nThe following example defines a factory on the `User` model that is able to\r\ngenerate a new `User` object with unique `id` and `handle` attributes.\r\n\r\n```ruby\r\nUser.factory do\r\n  id {|n| n }\r\n  handle \"user#{id}\"\r\nend\r\n```\r\n\r\n## License\r\n\r\nCopyright 2012 Michael Jackson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nThe software is provided \"as is\", without warranty of any kind, express or\r\nimplied, including but not limited to the warranties of merchantability,\r\nfitness for a particular purpose and non-infringement. In no event shall the\r\nauthors or copyright holders be liable for any claim, damages or other\r\nliability, whether in an action of contract, tort or otherwise, arising from,\r\nout of or in connection with the software or the use or other dealings in\r\nthe software.\r\n"}